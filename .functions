# Refresh all the dotfiles!
function dotfiles() {
	local ARGS_ERROR="Invalid or no argument passed, did you mean \e[1mrefresh\e[0m?\n"
	if [[ $# == 1 ]]; then
		case $1 in
			refresh) source $HOME/.bash_profile; printf 'Dotfiles refreshed.\n' ;;
			view) cd $(dirname $(readlink $HOME/.bash_profile)) ;;
			*) printf "$ARGS_ERROR" ;;
		esac
	else
		printf "$ARGS_ERROR";
	fi
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Move the given file(s) to the Trash
function trash() {
	local path;
	for path; do
		# Make relative paths "absolutey"
		[ "${path:0:1}" = '/' ] || path="$PWD/$1";

		# Execute the AppleScript to nudge Finder
		echo "$(cat <<-EOD
			tell application "Finder"
				delete POSIX file "${path//\"/\"}"
			end
		EOD)" | osascript;
	done;
}

# More sensible `tree`
function treep() {
	if command -v tree >/dev/null 2>&1; then
		tree -CN $@ | less -r;
	fi
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
	local text
	if [ -t 0 ]; then # argument
		text="$1"
	else # pipe
		text=$(cat)
	fi
	body=$(echo "$text" | sed -E 's|$|<br>|g')
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$text", body:"$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Count number of characters and words in string
# TODO: This could be achieved with `wc` but it seems like it
#       has some errors (characters with +1 length)
#       coreutils has better implementation of `wc`
function text_count() {
	local CHARACTER_COUNT=`php -r "echo strlen('$@');"`;
	local WORD_COUNT=`php -r "echo str_word_count('$@');"`;
	printf "Number of characters: \e[1m$CHARACTER_COUNT\e[0m\n";
	printf "Number of words: \e[1m$WORD_COUNT\e[0m\n";
}

# Use ImageOptim from command line
# If you don’t want to depend on ImageOptim,
# you can try with https://github.com/toy/image_optim
function imageoptim() {
	local TEXT_INSTALL="Install ImageOptim"
	local TEXT_DONT_INSTALL="Don’t install ImageOptim"
	if [[ $OSTYPE =~ "darwin" ]]; then
		if [ -a "/Applications/ImageOptim.app" ]; then
			open -a ImageOptim.app "$@";
		else
			printf "It seems like you don’t have ImageOptim installed. Would you like to install it?\n"
			select yn in "$TEXT_INSTALL" "$TEXT_DONT_INSTALL"; do
				case $yn in
					"$TEXT_INSTALL" )
						curl -O http://imageoptim.com/ImageOptim.tbz2
						tar -xjf ImageOptim.tbz2
						mv ImageOptim.app /Applications/
						rm ImageOptim.tbz2
						break;
						;;
					"$TEXT_DONT_INSTALL" )
						break;
						;;
				esac
			done
		fi
	else
		printf "Sorry, ImageOptim is available only on OS X.";
	fi
}
