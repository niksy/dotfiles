# Refresh all the dotfiles!
function dotfiles() {
	local ARGS_ERROR="Invalid or no argument passed, did you mean \e[1mrefresh\e[0m?\n"
	if [[ $# == 1 ]]; then
		case $1 in
			refresh) source $HOME/.bash_profile; printf 'Dotfiles refreshed.\n' ;;
			view) cd $(dirname $(readlink $HOME/.bash_profile)) ;;
			*) printf "$ARGS_ERROR" ;;
		esac
	else
		printf "$ARGS_ERROR";
	fi
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Move the given file(s) to the Trash
function trash() {
	local path;
	for path; do
		# Make relative paths "absolutey"
		[ "${path:0:1}" = '/' ] || path="$PWD/$1";

		# Execute the AppleScript to nudge Finder
		echo "$(cat <<-EOD
			tell application "Finder"
				delete POSIX file "${path//\"/\"}"
			end
		EOD)" | osascript;
	done;
}

# More sensible `tree`
function treep() {
	if command -v tree >/dev/null 2>&1; then
		tree -CN $@ | less -r;
	fi
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
	local text
	if [ -t 0 ]; then # argument
		text="$1"
	else # pipe
		text=$(cat)
	fi
	body=$(echo "$text" | sed -E 's|$|<br>|g')
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$text", body:"$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Count number of characters and words in string
function txtcount() {
	if [[ $# != 0 ]]; then
		local CHARACTER_COUNT=$(printf "$@" | wc -m | tr -d ' ');
		local WORD_COUNT=$(printf "$@" | wc -w | tr -d ' ');
		printf "Number of characters: \e[1m$CHARACTER_COUNT\e[0m\n";
		printf "Number of words: \e[1m$WORD_COUNT\e[0m\n";
	else
		printf "No text supplied.\n";
	fi
}

# Use ImageOptim from command line
# If you don’t want to depend on ImageOptim,
# you can try with https://github.com/toy/image_optim
function imageoptim() {
	local TEXT_INSTALL="Install ImageOptim"
	local TEXT_DONT_INSTALL="Don’t install ImageOptim"
	if [[ $OSTYPE =~ "darwin" ]]; then
		if [ -a "/Applications/ImageOptim.app" ]; then
			open -a ImageOptim.app "$@";
		else
			printf "It seems like you don’t have ImageOptim installed. Would you like to install it?\n"
			select yn in "$TEXT_INSTALL" "$TEXT_DONT_INSTALL"; do
				case $yn in
					"$TEXT_INSTALL" )
						curl -O http://imageoptim.com/ImageOptim.tbz2
						tar -xjf ImageOptim.tbz2
						mv ImageOptim.app /Applications/
						rm ImageOptim.tbz2
						break;
						;;
					"$TEXT_DONT_INSTALL" )
						break;
						;;
				esac
			done
		fi
	else
		printf "Sorry, ImageOptim is available only on OS X.";
	fi
}

# Entities conversion
function entities() {

	local ARGS_ERROR="Invalid or no argument passed.\n"

	function __entities_decimal() {
		local DECIMAL_VALUE;
		local PARSED_DECIMAL_VALUE;
		if [[ $2 == 'to' ]]; then
			if command -v node >/dev/null 2>&1; then
				DECIMAL_VALUE=$(node -e 'console.log(process.argv[1].charCodeAt(0));' "$1" | tr -d '\n');
			else
				DECIMAL_VALUE=$(php -r 'list(, $ord) = unpack("N", mb_convert_encoding($argv[1], "UCS-4BE", "UTF-8")); echo $ord;' "$1");
			fi
		elif [[ $2 == 'from' ]]; then
			PARSED_DECIMAL_VALUE=$(printf "$1" | sed "s/[^0-9]//g");
			if command -v node >/dev/null 2>&1; then
				DECIMAL_VALUE=$(node -e 'console.log(String.fromCharCode('$PARSED_DECIMAL_VALUE'));' | tr -d '\n');
			else
				DECIMAL_VALUE=$(php -r 'echo mb_convert_encoding("&#" . intval('$PARSED_DECIMAL_VALUE') . ";", "UTF-8", "HTML-ENTITIES");');
			fi
		fi
		printf "$DECIMAL_VALUE";
		if [[ $3 == 'output' ]]; then
			if [[ $2 == 'to' ]]; then
				printf "\nHTML: &#$DECIMAL_VALUE;\n";
			elif [[ $2 == 'from' ]]; then
				printf "\n";
			fi
		fi
	}

	function __entities_hexadecimal() {
		local HEXADECIMAL_VALUE;
		local PARSED_HEXADECIMAL_VALUE;
		if [[ $2 == 'to' ]]; then
			HEXADECIMAL_VALUE=$(printf "%04x" $(__entities_decimal "$1" "to"));
		elif [[ $2 == 'from' ]]; then
			PARSED_HEXADECIMAL_VALUE=$(printf "$1" | sed "s/[^0-9A-Fa-f]{1,4}//g");
			HEXADECIMAL_VALUE=$(__entities_decimal "$(printf "%d" 0x$PARSED_HEXADECIMAL_VALUE)" "from");
		fi
		printf "$HEXADECIMAL_VALUE";
		if [[ $3 == 'output' ]]; then
			if [[ $2 == 'to' ]]; then
				printf "\nHTML: &#x$HEXADECIMAL_VALUE;\nCSS:  %s$HEXADECIMAL_VALUE \n" "\\";
			elif [[ $2 == 'from' ]]; then
				printf "\n";
			fi
		fi
	}

	function __entities_nument() {
		local STRING;
		if [[ $2 == 'to' ]]; then
			if command -v node >/dev/null 2>&1; then
				STRING=$(node -e '
					var input_string = process.argv[1];
					var unicode_string = "";
					for(var i = 0; i < input_string.length; i++){
						var char_code = input_string.charCodeAt(i);
						char_code = "&#" + char_code + ";";
						unicode_string += char_code;
					}
					console.log(unicode_string);' "$1" | tr -d '\n');
			else
				STRING=$(php -r 'echo mb_encode_numericentity($argv[1], array (0x0, 0xffff, 0, 0xffff), "UTF-8");' "$1");
			fi
		elif [[ $2 == 'from' ]]; then
			if command -v node >/dev/null 2>&1; then
				STRING=$(node -e '
					var input_string = process.argv[1];
					input_string = input_string.replace(/&#/g,"").split(";");
					input_string.pop();
					console.log(String.fromCharCode.apply(null, input_string));' "$1" | tr -d '\n');
			else
				STRING=$(php -r 'echo mb_decode_numericentity($argv[1], array (0x0, 0xffff, 0, 0xffff), "UTF-8");' "$1");
			fi
		fi
		printf "$STRING";
		printf "\n";
	}

	function __entities_help() {
		printf "entities [OPTION] [VALUE]

Options:
  todec             Convert from character to decimal value
  tohex             Convert from character to hexadecimal value
  tonument          Convert string to numeric entities
  fromdec           Convert from decimal to character value
  fromhex           Convert from hexadecimal to character value
  fromnument        Convert numeric entities to string
  -h, --help        Display this help and exit\n\n"
		printf "Notes:\n"
		printf "* When used without quotes, \e[1m%s\e[0m, \e[1m%s\e[0m and \e[1m%s\e[0m must be escaped.\n" "\\" "\"" "'"
		printf "* When used with double-quotes, \e[1m%s\e[0m and \e[1m%s\e[0m must be escaped.\n" "\\" "\""
		printf "* When used with single-quotes, \e[1m%s\e[0m can’t be processed.\n" "'"
	}

	if [[ $2 != '' ]]; then
		case $1 in
			todec) __entities_decimal "$2" "to" "output" ;;
			tohex) __entities_hexadecimal "$2" "to" "output" ;;
			fromdec) __entities_decimal "$2" "from" "output" ;;
			fromhex) __entities_hexadecimal "$2" "from" "output" ;;
			tonument) __entities_nument "$2" "to" ;;
			fromnument) __entities_nument "$2" "from" ;;
			--help|-h|*) __entities_help ;;
		esac
	else
		case $1 in
			--help|-h|*) __entities_help ;;
		esac
	fi

}
