#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# Generate self-signed SSL certificate for local development
function self-signed-cert-generator() {

	local subj="/CN=$1"
	local filename="server"

	cp /System/Library/OpenSSL/openssl.cnf temp.cnf

	sed -i '' 's/# req_extensions = v3_req/req_extensions = v3_req/' temp.cnf
	sed -i '' $'s/\[ v3_req \]/[ v3_req ]\\\n\\\nsubjectAltName = @alt_names/' temp.cnf

	ALT_NAMES="\n[alt_names]"
	COUNT=1

	for DOMAIN in "$@"
	do
	    ALT_NAMES="$ALT_NAMES\nDNS.$COUNT = $DOMAIN"
	    COUNT=$(($COUNT + 1))
	done

	printf "$ALT_NAMES" >> temp.cnf

	openssl req \
	    -newkey rsa:2048 \
	    -x509 \
	    -nodes \
	    -keyout $filename.key \
	    -new \
	    -out $filename.crt \
	    -subj "$subj" \
	    -reqexts v3_req \
	    -extensions v3_req \
	    -config temp.cnf \
	    -sha256 \
	    -days 3650

	openssl x509 -in $filename.crt -text

	rm temp.cnf

}

# Search current directory for file
function spot() {
	mdfind -onlyin $(pwd) -name $1
}

# Search current directory for hidden file
function spoth() {
	find $(pwd) -name $1
}

# Add Node and npm via nvm to current shell
function nn {
	export NVM_SYMLINK_CURRENT=true
	export NVM_DIR="$HOME/.nvm"
	source "/usr/local/opt/nvm/nvm.sh"
	node -v
	npm -v
}

# Get list of Browserstack projects
function browserstack-projects {
	curl -u "${BROWSER_STACK_USERNAME}:${BROWSER_STACK_ACCESS_KEY}" "https://api.browserstack.com/automate/projects.json" | prettyjson | grep -i -C 10 "$1"
}

# Get Browserstack project badge key
function browserstack-project-badge-key {
	curl -u "${BROWSER_STACK_USERNAME}:${BROWSER_STACK_ACCESS_KEY}" "https://api.browserstack.com/automate/projects/$1/badge_key"
}

# Get cheatsheet for CLI command
function cheat {
	curl cht.sh/"$1"?style=algol_nu
}

# Sort command history, most recent on bottom, remove unecessary statements, trim whitespace
# and remove duplicate entries, then fuzzy-search through list, copy selected command
# to clipboard and paste to Terminal
function fh {
	history | sort -nr | sort -uk2 | sort -n | sed 's/ *[0-9]* *//' | awk '{$1=$1;print}' | awk '!a[$0]++' | fzf | c && osascript -e 'tell application "System Events" to keystroke "v" using command down'
}

# Open npm package in jsDelivr
function npmjsdelivr {
	open "https://www.jsdelivr.com/package/npm/$1"
}

# cd's to frontmost window of Finder
function cdf {
	cd "`osascript -e 'tell application "Finder"' -e 'set myname to POSIX path of (target of window 1 as alias)' -e 'end tell' 2>/dev/null`"
}

# Open file with default editor
function fe {
	local files
	IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
	[[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# Get local IP address
function localip {
	INTERFACE=$(route -n get 0.0.0.0 2>/dev/null | awk '/interface: / {print $2}');
	ipconfig getifaddr $INTERFACE
}

# Get gzipped and minified size of ES module
function module-size {
	npx rollup-plugin-node-resolve 2>/dev/null
	npx rollup --input $1 --format es --plugin rollup-plugin-node-resolve | npx terser --comments false --compress --mangle --module | npx gzip-size-cli
}

# Change shell to Bash
function change-shell-to-bash {
	chsh -s /bin/bash
	echo "Active shell is $SHELL"
}

# Use Docker ImageMagick
function dimagemagick {
	ENTRYPOINT=$1;
	shift;
	docker run --entrypoint="$ENTRYPOINT" --rm -v "$PWD":/app --workdir=/app dpokidov/imagemagick "$@"
}

# Start mock HTTP server
function httpbin {
	docker run -p ${1:-9999}:80 kennethreitz/httpbin
}
