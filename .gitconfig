[alias]
	# Repository information
	# --------------------------------------------------------------------------
	# Non-verbose status
	st = status -sb
	# Simple decorated log with 20 latest commits
	lg = log --oneline --decorate -n 20
	# Get the current branch name
	branch-name = "!git rev-parse --abbrev-ref HEAD"
	# Copy current branch name
	cbn = "!git branch-name | tr -d '\n' | pbcopy"

	# Commits
	# --------------------------------------------------------------------------
	# Review code before commit
	ap = add --patch
	# Interactive staging
	ai = add --interactive
	# Add all (including non-staged) files
	aa = add -A
	# Commit with simple message inside editor
	cm = commit --reedit-message=HEAD --reset-author
	# WIP commit which can be discarded, ammended, squashed, etc.
	wip = commit --message="WIP"
	# Uncommit last commit
	uncommit = reset --soft HEAD^
	# Amend last commit inside editor
	amend = commit --amend
	# Rebase last n commits
	replay = "!f() { git rebase -i HEAD~$@; }; f"
	# Cherry-pick and rebase range of commits
	cherry-pick-range = "!f() { git rebase --onto $(git branch-name) $1^ $2 && echo \"\nCreate new branch with 'git branch {branch-name}'\n\"; }; f"

	# Stage
	# --------------------------------------------------------------------------
	# Unstage staged files
	unstage = reset HEAD
	# Show changes that have been staged
	diffc = diff --cached

	# Branches
	# --------------------------------------------------------------------------
	# Checkout
	co = checkout
	# Checkout new branch
	cob = checkout -b
	# Search for branch
	brep = !git branch -a | grep -i
	# Push the current branch to the remote (default "origin"), and set it to
	# track the upstream branch
	publish = "!git push -u ${1:-origin} $(git branch-name)"
	# Delete the remote version of the current branch
	unpublish = "!git push ${1:-origin} :$(git branch-name)"
	# Always add merge commit when merging
	mergec = merge --no-ff
	# Rebase operations
	rbc = rebase --continue
	rbs = rebase --skip

	# Files
	# --------------------------------------------------------------------------
	# Checkout our version of a file and add it
	ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	# Checkout their version of a file and add it
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
	# Revert an applied stash (re-stash)
	stash-unapply = !git stash show -p | git apply -R

	# Remote
	# --------------------------------------------------------------------------
	# Pull with rebase
	pullr = pull --rebase

[core]
	editor = subl -w
	# Set CRLF endings in Windows checkouts but LF endings on Mac and Linux systems and in the repository
	autocrlf = input
	# Use custom `.gitignore`
	excludesfile = ~/.gitignore_global
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
	# and carriage returns at the end of lines as OK
	whitespace = trailing-space,space-before-tab,indent-with-non-tab,cr-at-eol
	# Make `git rebase` safer on OS X (http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/)
	trustctime = false

[merge]
	tool = kdiff3
	# Include summaries of merged commits in newly created merge commit messages
	log = true

# Push changes only on current branch
[push]
	default = upstream

[color]
	ui = true
[color "branch"]
	current = blue
	local = yellow
	remote = magenta
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red reverse
	new = green reverse
	whitespace = white reverse
[color "status"]
	added = yellow
	changed = red
	untracked = cyan
	branch = magenta

# URL shorthands
[url "git@github.com:"]
	pushInsteadOf = "https://github.com/"
[url "git@gist.github.com:"]
	pushInsteadOf = "https://gist.github.com/"

[include]
	# Set the extra personal settings (e.g. name and email)
	path = ~/.gitconfig_extra
