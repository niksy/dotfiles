[alias]
	# Repository information
	# --------------------------------------------------------------------------
	# Non-verbose status
	st = status -sb
	# Simple decorated log with 20 latest commits
	lg = log --oneline --decorate -n 20
	# `lg` but only with my commit messages for today
	lgmt = "!git log --oneline --decorate --since=$(date +%F)' 00:00' --date=iso --pretty=format:'%as;%ae;%s' | awk -F';' '{ if ($1 >= \"'$(date +%F)'\" && $2 == \"'$(git config user.email)'\") print $3}'"
	# Get the current branch name
	branch-name = rev-parse --abbrev-ref HEAD
	# Copy current branch name
	cbn = "!git branch-name | tr -d '\n' | pbcopy"

	# Commits
	# --------------------------------------------------------------------------
	# Review code before commit
	ap = add --patch
	# Interactive staging
	ai = add --interactive
	# Add all (including non-staged) files
	aa = add -A
	# Commit with simple message inside editor
	cm = commit --reedit-message=HEAD --reset-author
	# WIP commit which can be discarded, ammended, squashed, etc.
	wip = "!f() { WIP_MESSAGE=$([[ -z "$1" ]] && echo "" || echo ": $1"); git commit --message=\"WIP$WIP_MESSAGE\"; }; f"
	# Uncommit last commit
	uncommit = reset --soft HEAD^
	# Amend last commit inside editor
	amend = commit --amend
	# Rebase last n commits
	replay = "!f() { git rebase -i "HEAD~$1" || git rebase -i --root; }; f "$@""
	# Cherry-pick and rebase range of commits
	cherry-pick-range = "!f() { git rebase --onto "$(git branch-name)" "$1^" "$2"; printf 'Create new branch with `git branch {branch-name}`\n'; }; f "$@""
	# Copy last commit message
	clcm = "!git log -1 --pretty=%B | pbcopy"

	# Stage
	# --------------------------------------------------------------------------
	# Unstage staged files
	unstage = reset HEAD
	# Show changes that have been staged
	diffc = diff --cached

	# Branches
	# --------------------------------------------------------------------------
	# Checkout
	co = switch
	# Checkout new branch
	cob = switch -c
	# Search for branch
	brep = !git branch -a | grep -i
	# Push the current branch to the remote (default "origin"), and set it to
	# track the upstream branch
	publish = "!f() { git push -u "${1:-origin}" "$(git branch-name)"; }; f "$@""
	# Delete the remote version of the current branch and unsets remote branch reference
	unpublish = "!f() { git push "${1:-origin}" :"$(git branch-name)" && git branch --unset-upstream; }; f "$@""
	# Rebase operations
	rbc = rebase --continue
	rbs = rebase --skip
	# Remove local branch
	rmb = branch -D
	# Prune remote and delete all local pruned branches
	sweep = "!git remote prune "${1:-origin}" | awk 'BEGIN{FS=\"origin/\"};/pruned/{print $2}' | xargs git branch -D && git branch -vv | awk '/^ .*gone/{print $1}' | xargs git branch -D"
	# Fuzzy-search and switch branch
	cof = "!f() { git switch "$(git branch -a | fzf | awk '{print $1}' | sed 's/.* //' | awk -F/ '{print $NF}')"; }; f"
	# Force push with lease
	pushf = push --force-with-lease

	# Files
	# --------------------------------------------------------------------------
	# Checkout our version of a file and add it
	ours = "!f() { git checkout --ours "$1" && git add "$1"; }; f "$@""
	# Checkout their version of a file and add it
	theirs = "!f() { git checkout --theirs "$1" && git add "$1"; }; f "$@""
	# Revert an applied stash (re-stash)
	stash-unapply = !git stash show -p | git apply -R

	# Remote
	# --------------------------------------------------------------------------
	# Pull with rebase
	pullr = pull --rebase

	# Misc
	# --------------------------------------------------------------------------
	# Delete latest npm version
	delete-npm-version = "!f() { git uncommit && git unstage && git co -- . && git tag -d "$(git describe --tags "$(git rev-list --tags --max-count=1)")"; }; f"

[core]
	editor = subl -w
	# Set CRLF endings in Windows checkouts but LF endings on Mac and Linux systems and in the repository
	autocrlf = input
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
	# and carriage returns at the end of lines as OK
	whitespace = trailing-space,space-before-tab,indent-with-non-tab,cr-at-eol
	# Make `git rebase` safer on macOS (http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/)
	trustctime = false

[log]
	# Nicer date format
	date = iso

# Add Meld as mergetool
[mergetool "meldmac"]
	cmd = open -W -a Meld --args --auto-merge "$PWD/$LOCAL" "$PWD/$BASE" "$PWD/$REMOTE" --output="$PWD/$MERGED"
	trustExitCode = true

[merge]
	tool = meldmac
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	renamelimit = 2864

[push]
	# Push changes only on current branch
	default = upstream

[interactive]
	diffFilter = "/opt/homebrew/share/git-core/contrib/diff-highlight/diff-highlight"

[color]
	ui = true
[color "branch"]
	current = blue
	local = yellow
	remote = magenta
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red reverse
	new = green reverse
	whitespace = white reverse
[color "diff-highlight"]
	oldNormal = red
	oldHighlight = red reverse
	newNormal = green
	newHighlight = green reverse
[color "status"]
	added = yellow
	changed = red
	untracked = cyan
	branch = magenta

# URL shorthands
[url "git@github.com:"]
	pushInsteadOf = "https://github.com/"
[url "git@gist.github.com:"]
	pushInsteadOf = "https://gist.github.com/"

[include]
	# Set the extra personal settings (e.g. name and email)
	path = ~/.gitconfig_extra
